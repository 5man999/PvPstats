From ac70d5137263c8a4b8dc07057c9fc79df4410eca Mon Sep 17 00:00:00 2001
From: ShinDarth <borzifrancesco@gmail.com>
Date: Mon, 1 Sep 2014 17:12:45 +0200
Subject: [PATCH] PvPstats patch

---
 src/game/BattleGround/BattleGround.cpp | 47 +++++++++++++++++++++++++++++++++-
 src/game/BattleGround/BattleGround.h   | 13 ++++++++++
 src/game/BattleGround/BattleGroundAB.h |  4 +++
 src/game/BattleGround/BattleGroundAV.h |  7 +++++
 src/game/BattleGround/BattleGroundEY.h |  1 +
 src/game/BattleGround/BattleGroundWS.h |  4 +++
 src/game/World.cpp                     |  1 +
 src/game/World.h                       |  1 +
 src/mangosd/mangosd.conf.dist.in       |  7 ++++-
 9 files changed, 83 insertions(+), 2 deletions(-)

diff --git a/src/game/BattleGround/BattleGround.cpp b/src/game/BattleGround/BattleGround.cpp
index 414bb2b..463b98f 100644
--- a/src/game/BattleGround/BattleGround.cpp
+++ b/src/game/BattleGround/BattleGround.cpp
@@ -629,19 +629,44 @@ void BattleGround::EndBattleGround(Team winner)
     WorldPacket data;
     int32 winmsg_id = 0;

+    static SqlStatementID insPvPstatsBattleground;
+    static SqlStatementID insPvPstatsPlayer;
+    SqlStatement stmt = CharacterDatabase.CreateStatement(insPvPstatsBattleground, "INSERT INTO pvpstats_battlegrounds (id, winner_faction, bracket_id, type, date) VALUES (?, ?, ?, ?, NOW())");
+    QueryResult * result;
+    uint64 battleground_id = 1;
+    uint32 winner_faction = 2;
+
+    if (isBattleGround() && sWorld.getConfig(CONFIG_BOOL_BATTLEGROUND_STORE_STATISTICS_ENABLE))
+    {
+        result = CharacterDatabase.Query("SELECT MAX(id) FROM pvpstats_battlegrounds");
+
+        if (result)
+        {
+            Field* fields = result->Fetch();
+            battleground_id = fields[0].GetUInt64() + 1;
+        }
+    }
+
     if (winner == ALLIANCE)
     {
         winmsg_id = isBattleGround() ? LANG_BG_A_WINS : LANG_ARENA_GOLD_WINS;

         PlaySoundToAll(SOUND_ALLIANCE_WINS);                // alliance wins sound
+
+        winner_faction = 1;
     }
     else if (winner == HORDE)
     {
         winmsg_id = isBattleGround() ? LANG_BG_H_WINS : LANG_ARENA_GREEN_WINS;

         PlaySoundToAll(SOUND_HORDE_WINS);                   // horde wins sound
+
+        winner_faction = 0;
     }

+    if (isBattleGround() && sWorld.getConfig(CONFIG_BOOL_BATTLEGROUND_STORE_STATISTICS_ENABLE))
+        stmt.PExecute(battleground_id, winner_faction, m_BracketId + 1, (uint8)GetTypeID());
+
     SetWinner(winner);

     SetStatus(STATUS_WAIT_LEAVE);
@@ -721,6 +746,26 @@ void BattleGround::EndBattleGround(Team winner)
             else
                 loser_arena_team->MemberLost(plr, winner_rating);
         }
+
+        if (isBattleGround() && sWorld.getConfig(CONFIG_BOOL_BATTLEGROUND_STORE_STATISTICS_ENABLE))
+        {
+            BattleGroundScoreMap::iterator score = m_PlayerScores.find(itr->first);
+            SqlStatement stmt = CharacterDatabase.CreateStatement(insPvPstatsPlayer, "INSERT INTO pvpstats_players (battleground_id, character_guid, score_killing_blows, score_deaths, score_honorable_kills, score_bonus_honor, score_damage_done, score_healing_done, attr_1, attr_2, attr_3, attr_4, attr_5) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
+            stmt.addUInt32(battleground_id);
+            stmt.addUInt32(plr->GetGUIDLow());
+            stmt.addUInt32(score->second->GetKillingBlows());
+            stmt.addUInt32(score->second->GetDeaths());
+            stmt.addUInt32(score->second->GetHonorableKills());
+            stmt.addUInt32(score->second->GetBonusHonor());
+            stmt.addUInt32(score->second->GetDamageDone());
+            stmt.addUInt32(score->second->GetHealingDone());
+            stmt.addUInt32(score->second->GetAttr1());
+            stmt.addUInt32(score->second->GetAttr2());
+            stmt.addUInt32(score->second->GetAttr3());
+            stmt.addUInt32(score->second->GetAttr4());
+            stmt.addUInt32(score->second->GetAttr5());
+            stmt.Execute();
+        }

         if (team == winner)
         {
diff --git a/src/game/BattleGround/BattleGround.h b/src/game/BattleGround/BattleGround.h
index 9e7b4c1..f7fbc09 100644
--- a/src/game/BattleGround/BattleGround.h
+++ b/src/game/BattleGround/BattleGround.h
@@ -251,6 +251,19 @@ class BattleGroundScore
         {}
         virtual ~BattleGroundScore() {}                     // virtual destructor is used when deleting score from scores map

+        uint32 GetKillingBlows() const { return KillingBlows; }
+        uint32 GetDeaths() const { return Deaths; }
+        uint32 GetHonorableKills() const { return HonorableKills; }
+        uint32 GetBonusHonor() const { return BonusHonor; }
+        uint32 GetDamageDone() const { return DamageDone; }
+        uint32 GetHealingDone() const { return HealingDone; }
+
+        virtual uint32 GetAttr1() const { return 0; }
+        virtual uint32 GetAttr2() const { return 0; }
+        virtual uint32 GetAttr3() const { return 0; }
+        virtual uint32 GetAttr4() const { return 0; }
+        virtual uint32 GetAttr5() const { return 0; }
+
         uint32 KillingBlows;
         uint32 Deaths;
         uint32 HonorableKills;
diff --git a/src/game/BattleGround/BattleGroundAB.h b/src/game/BattleGround/BattleGroundAB.h
index baf7eed..f5200b0 100644
--- a/src/game/BattleGround/BattleGroundAB.h
+++ b/src/game/BattleGround/BattleGroundAB.h
@@ -146,6 +146,10 @@ class BattleGroundABScore : public BattleGroundScore
     public:
         BattleGroundABScore(): BasesAssaulted(0), BasesDefended(0) {};
         virtual ~BattleGroundABScore() {};
+
+        uint32 GetAttr1() const { return BasesAssaulted; }
+        uint32 GetAttr2() const { return BasesDefended; }
+
         uint32 BasesAssaulted;
         uint32 BasesDefended;
 };
diff --git a/src/game/BattleGround/BattleGroundAV.h b/src/game/BattleGround/BattleGroundAV.h
index 4a13449..325716d 100644
--- a/src/game/BattleGround/BattleGroundAV.h
+++ b/src/game/BattleGround/BattleGroundAV.h
@@ -304,6 +304,13 @@ class BattleGroundAVScore : public BattleGroundScore
     public:
         BattleGroundAVScore() : GraveyardsAssaulted(0), GraveyardsDefended(0), TowersAssaulted(0), TowersDefended(0), SecondaryObjectives(0) {};
         virtual ~BattleGroundAVScore() {};
+
+        uint32 GetAttr1() const { return GraveyardsAssaulted; }
+        uint32 GetAttr2() const { return GraveyardsDefended; }
+        uint32 GetAttr3() const { return TowersAssaulted; }
+        uint32 GetAttr4() const { return TowersDefended; }
+        uint32 GetAttr5() const { return SecondaryObjectives; }
+
         uint32 GraveyardsAssaulted;
         uint32 GraveyardsDefended;
         uint32 TowersAssaulted;
diff --git a/src/game/BattleGround/BattleGroundEY.h b/src/game/BattleGround/BattleGroundEY.h
index 1840925..3b60a7d 100644
--- a/src/game/BattleGround/BattleGroundEY.h
+++ b/src/game/BattleGround/BattleGroundEY.h
@@ -229,6 +229,7 @@ class BattleGroundEYScore : public BattleGroundScore
     public:
         BattleGroundEYScore() : FlagCaptures(0) {};
         virtual ~BattleGroundEYScore() {};
+        uint32 GetAttr1() const { return FlagCaptures; }
         uint32 FlagCaptures;
 };

diff --git a/src/game/BattleGround/BattleGroundWS.h b/src/game/BattleGround/BattleGroundWS.h
index 829b73f..51f7e77 100644
--- a/src/game/BattleGround/BattleGroundWS.h
+++ b/src/game/BattleGround/BattleGroundWS.h
@@ -77,6 +77,10 @@ class BattleGroundWGScore : public BattleGroundScore
     public:
         BattleGroundWGScore() : FlagCaptures(0), FlagReturns(0) {};
         virtual ~BattleGroundWGScore() {};
+
+        uint32 GetAttr1() const { return FlagCaptures; }
+        uint32 GetAttr2() const { return FlagReturns; }
+
         uint32 FlagCaptures;
         uint32 FlagReturns;
 };
diff --git a/src/game/World.cpp b/src/game/World.cpp
index 6e6c87f..c2f4a78 100644
--- a/src/game/World.cpp
+++ b/src/game/World.cpp
@@ -718,6 +718,7 @@ void World::LoadConfigSettings(bool reload)
     setConfig(CONFIG_BOOL_BATTLEGROUND_CAST_DESERTER,                  "Battleground.CastDeserter", true);
     setConfigMinMax(CONFIG_UINT32_BATTLEGROUND_QUEUE_ANNOUNCER_JOIN,   "Battleground.QueueAnnouncer.Join", 0, 0, 2);
     setConfig(CONFIG_BOOL_BATTLEGROUND_QUEUE_ANNOUNCER_START,          "Battleground.QueueAnnouncer.Start", false);
+    setConfig(CONFIG_BOOL_BATTLEGROUND_STORE_STATISTICS_ENABLE,        "Battleground.StoreStatistics.Enable", false);
     setConfig(CONFIG_UINT32_BATTLEGROUND_INVITATION_TYPE,              "Battleground.InvitationType", 0);
     setConfig(CONFIG_UINT32_BATTLEGROUND_PREMATURE_FINISH_TIMER,       "BattleGround.PrematureFinishTimer", 5 * MINUTE * IN_MILLISECONDS);
     setConfig(CONFIG_UINT32_BATTLEGROUND_PREMADE_GROUP_WAIT_FOR_MATCH, "BattleGround.PremadeGroupWaitForMatch", 30 * MINUTE * IN_MILLISECONDS);
diff --git a/src/game/World.h b/src/game/World.h
index 1ecad90..d60f21d 100644
--- a/src/game/World.h
+++ b/src/game/World.h
@@ -312,6 +312,7 @@ enum eConfigBoolValues
     CONFIG_BOOL_SKILL_FAIL_POSSIBLE_FISHINGPOOL,
     CONFIG_BOOL_BATTLEGROUND_CAST_DESERTER,
     CONFIG_BOOL_BATTLEGROUND_QUEUE_ANNOUNCER_START,
+    CONFIG_BOOL_BATTLEGROUND_STORE_STATISTICS_ENABLE,
     CONFIG_BOOL_ARENA_AUTO_DISTRIBUTE_POINTS,
     CONFIG_BOOL_ARENA_QUEUE_ANNOUNCER_JOIN,
     CONFIG_BOOL_ARENA_QUEUE_ANNOUNCER_EXIT,
diff --git a/src/mangosd/mangosd.conf.dist.in b/src/mangosd/mangosd.conf.dist.in
index 566b972..e9e964a 100644
--- a/src/mangosd/mangosd.conf.dist.in
+++ b/src/mangosd/mangosd.conf.dist.in
@@ -1414,6 +1414,10 @@ Death.Ghost.RunSpeed.Battleground = 1.0
 #        Enable queue announcer posting to chat at BG start
 #        Default: 0 (disable)
 #                 1 (enable)
+#    Battleground.StoreStatistics.Enable
+#       Store Battleground scores in the database.
+#       Default: 0 - (Disabled)
+#                1 - (Enabled)
 #
 #    Battleground.InvitationType
 #        Set Battleground invitation type
@@ -1435,6 +1439,7 @@ Death.Ghost.RunSpeed.Battleground = 1.0
 Battleground.CastDeserter = 1
 Battleground.QueueAnnouncer.Join = 0
 Battleground.QueueAnnouncer.Start = 0
+Battleground.StoreStatistics.Enable = 0
 Battleground.InvitationType = 0
 BattleGround.PrematureFinishTimer = 300000
 BattleGround.PremadeGroupWaitForMatch = 1800000
--
1.9.1

