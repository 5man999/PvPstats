From a74d986972a95ebc2f4d921b0ba5e9ce841a4361 Mon Sep 17 00:00:00 2001
From: ShinDarth <borzifrancesco@gmail.com>
Date: Mon, 1 Sep 2014 17:41:17 +0200
Subject: [PATCH] PvPstats patch

Signed-off-by: ShinDarth <borzifrancesco@gmail.com>
---
 src/game/BattleGround/BattleGround.cpp | 47 ++++++++++++++++++++++++++++++++++
 src/game/BattleGround/BattleGround.h   | 11 ++++++++
 src/game/BattleGround/BattleGroundAB.h |  4 +++
 src/game/BattleGround/BattleGroundAV.h |  7 +++++
 src/game/BattleGround/BattleGroundWS.h |  4 +++
 src/game/World.cpp                     |  1 +
 src/game/World.h                       |  1 +
 src/mangosd/mangosd.conf.dist.in       |  6 +++++
 8 files changed, 81 insertions(+)

diff --git a/src/game/BattleGround/BattleGround.cpp b/src/game/BattleGround/BattleGround.cpp
index 6d948c0..cacb36f 100644
--- a/src/game/BattleGround/BattleGround.cpp
+++ b/src/game/BattleGround/BattleGround.cpp
@@ -587,19 +587,44 @@ void BattleGround::EndBattleGround(Team winner)
     WorldPacket data;
     int32 winmsg_id = 0;

+    static SqlStatementID insPvPstatsBattleground;
+    static SqlStatementID insPvPstatsPlayer;
+    SqlStatement stmt = CharacterDatabase.CreateStatement(insPvPstatsBattleground, "INSERT INTO pvpstats_battlegrounds (id, winner_faction, bracket_id, type, date) VALUES (?, ?, ?, ?, NOW())");
+    QueryResult * result;
+    uint64 battleground_id = 1;
+    uint32 winner_faction = 2;
+
+    if (sWorld.getConfig(CONFIG_BOOL_BATTLEGROUND_STORE_STATISTICS_ENABLE))
+    {
+        result = CharacterDatabase.Query("SELECT MAX(id) FROM pvpstats_battlegrounds");
+
+        if (result)
+        {
+            Field* fields = result->Fetch();
+            battleground_id = fields[0].GetUInt64() + 1;
+        }
+    }
+
     if (winner == ALLIANCE)
     {
         winmsg_id = LANG_BG_A_WINS;

         PlaySoundToAll(SOUND_ALLIANCE_WINS);                // alliance wins sound
+
+        winner_faction = 1;
     }
     else if (winner == HORDE)
     {
         winmsg_id = LANG_BG_H_WINS;

         PlaySoundToAll(SOUND_HORDE_WINS);                   // horde wins sound
+
+        winner_faction = 0;
     }

+    if (sWorld.getConfig(CONFIG_BOOL_BATTLEGROUND_STORE_STATISTICS_ENABLE))
+        stmt.PExecute(battleground_id, winner_faction, GetMinLevel()/10, (uint8)GetTypeID());
+
     SetWinner(winner);

     SetStatus(STATUS_WAIT_LEAVE);
@@ -639,6 +664,28 @@ void BattleGround::EndBattleGround(Team winner)
         // this line is obsolete - team is set ALWAYS
         // if(!team) team = plr->GetTeam();

+        if (sWorld.getConfig(CONFIG_BOOL_BATTLEGROUND_STORE_STATISTICS_ENABLE))
+        {
+            BattleGroundScoreMap::iterator score = m_PlayerScores.find(itr->first);
+            SqlStatement stmt = CharacterDatabase.CreateStatement(insPvPstatsPlayer, "INSERT INTO pvpstats_players (battleground_id, character_guid, score_killing_blows, score_deaths, score_honorable_kills, score_bonus_honor, score_damage_done, score_healing_done, attr_1, attr_2, attr_3, attr_4, attr_5) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
+
+            stmt.addUInt32(battleground_id);
+            stmt.addUInt32(plr->GetGUIDLow());
+            stmt.addUInt32(score->second->GetKillingBlows());
+            stmt.addUInt32(score->second->GetDeaths());
+            stmt.addUInt32(score->second->GetHonorableKills());
+            stmt.addUInt32(score->second->GetBonusHonor());
+            stmt.addUInt32(0);
+            stmt.addUInt32(0);
+            stmt.addUInt32(score->second->GetAttr1());
+            stmt.addUInt32(score->second->GetAttr2());
+            stmt.addUInt32(score->second->GetAttr3());
+            stmt.addUInt32(score->second->GetAttr4());
+            stmt.addUInt32(score->second->GetAttr5());
+
+            stmt.Execute();
+        }
+
         if (team == winner)
         {
             RewardMark(plr, ITEM_WINNER_COUNT);
diff --git a/src/game/BattleGround/BattleGround.h b/src/game/BattleGround/BattleGround.h
index 7817d2c..b3c3a76 100644
--- a/src/game/BattleGround/BattleGround.h
+++ b/src/game/BattleGround/BattleGround.h
@@ -219,6 +219,17 @@ class BattleGroundScore
         {}
         virtual ~BattleGroundScore() {}                     // virtual destructor is used when deleting score from scores map

+        uint32 GetKillingBlows() const { return KillingBlows; }
+        uint32 GetDeaths() const { return Deaths; }
+        uint32 GetHonorableKills() const { return HonorableKills; }
+        uint32 GetBonusHonor() const { return BonusHonor; }
+
+        virtual uint32 GetAttr1() const { return 0; }
+        virtual uint32 GetAttr2() const { return 0; }
+        virtual uint32 GetAttr3() const { return 0; }
+        virtual uint32 GetAttr4() const { return 0; }
+        virtual uint32 GetAttr5() const { return 0; }
+
         uint32 KillingBlows;
         uint32 Deaths;
         uint32 HonorableKills;
diff --git a/src/game/BattleGround/BattleGroundAB.h b/src/game/BattleGround/BattleGroundAB.h
index 13705b4..5fac17f 100644
--- a/src/game/BattleGround/BattleGroundAB.h
+++ b/src/game/BattleGround/BattleGroundAB.h
@@ -151,6 +151,10 @@ class BattleGroundABScore : public BattleGroundScore
     public:
         BattleGroundABScore(): BasesAssaulted(0), BasesDefended(0) {};
         virtual ~BattleGroundABScore() {};
+
+        uint32 GetAttr1() const { return BasesAssaulted; }
+        uint32 GetAttr2() const { return BasesDefended; }
+
         uint32 BasesAssaulted;
         uint32 BasesDefended;
 };
diff --git a/src/game/BattleGround/BattleGroundAV.h b/src/game/BattleGround/BattleGroundAV.h
index 8dce42a..5bf417b 100644
--- a/src/game/BattleGround/BattleGroundAV.h
+++ b/src/game/BattleGround/BattleGroundAV.h
@@ -304,6 +304,13 @@ class BattleGroundAVScore : public BattleGroundScore
     public:
         BattleGroundAVScore() : GraveyardsAssaulted(0), GraveyardsDefended(0), TowersAssaulted(0), TowersDefended(0), SecondaryObjectives(0), LieutnantCount(0), SecondaryNPC(0) {};
         virtual ~BattleGroundAVScore() {};
+
+        uint32 GetAttr1() const { return GraveyardsAssaulted; }
+        uint32 GetAttr2() const { return GraveyardsDefended; }
+        uint32 GetAttr3() const { return TowersAssaulted; }
+        uint32 GetAttr4() const { return TowersDefended; }
+        uint32 GetAttr5() const { return SecondaryObjectives; }
+
         uint32 GraveyardsAssaulted;
         uint32 GraveyardsDefended;
         uint32 TowersAssaulted;
diff --git a/src/game/BattleGround/BattleGroundWS.h b/src/game/BattleGround/BattleGroundWS.h
index 039e911..edf836c 100644
--- a/src/game/BattleGround/BattleGroundWS.h
+++ b/src/game/BattleGround/BattleGroundWS.h
@@ -77,6 +77,10 @@ class BattleGroundWGScore : public BattleGroundScore
     public:
         BattleGroundWGScore() : FlagCaptures(0), FlagReturns(0) {};
         virtual ~BattleGroundWGScore() {};
+
+        uint32 GetAttr1() const { return FlagCaptures; }
+        uint32 GetAttr2() const { return FlagReturns; }
+
         uint32 FlagCaptures;
         uint32 FlagReturns;
 };
diff --git a/src/game/World.cpp b/src/game/World.cpp
index f730f79..5a85623 100644
--- a/src/game/World.cpp
+++ b/src/game/World.cpp
@@ -702,6 +702,7 @@ void World::LoadConfigSettings(bool reload)
     setConfig(CONFIG_BOOL_BATTLEGROUND_CAST_DESERTER,                  "Battleground.CastDeserter", true);
     setConfigMinMax(CONFIG_UINT32_BATTLEGROUND_QUEUE_ANNOUNCER_JOIN,   "Battleground.QueueAnnouncer.Join", 0, 0, 2);
     setConfig(CONFIG_BOOL_BATTLEGROUND_QUEUE_ANNOUNCER_START,          "Battleground.QueueAnnouncer.Start", false);
+    setConfig(CONFIG_BOOL_BATTLEGROUND_STORE_STATISTICS_ENABLE,        "Battleground.StoreStatistics.Enable", false);
     setConfig(CONFIG_UINT32_BATTLEGROUND_INVITATION_TYPE,              "Battleground.InvitationType", 0);
     setConfig(CONFIG_UINT32_BATTLEGROUND_PREMATURE_FINISH_TIMER,       "BattleGround.PrematureFinishTimer", 5 * MINUTE * IN_MILLISECONDS);
     setConfig(CONFIG_UINT32_BATTLEGROUND_PREMADE_GROUP_WAIT_FOR_MATCH, "BattleGround.PremadeGroupWaitForMatch", 0);
diff --git a/src/game/World.h b/src/game/World.h
index bf8f6fa..e7abc4d 100644
--- a/src/game/World.h
+++ b/src/game/World.h
@@ -300,6 +300,7 @@ enum eConfigBoolValues
     CONFIG_BOOL_SKILL_FAIL_POSSIBLE_FISHINGPOOL,
     CONFIG_BOOL_BATTLEGROUND_CAST_DESERTER,
     CONFIG_BOOL_BATTLEGROUND_QUEUE_ANNOUNCER_START,
+    CONFIG_BOOL_BATTLEGROUND_STORE_STATISTICS_ENABLE,
     CONFIG_BOOL_OUTDOORPVP_SI_ENABLED,
     CONFIG_BOOL_OUTDOORPVP_EP_ENABLED,
     CONFIG_BOOL_KICK_PLAYER_ON_BAD_PACKET,
diff --git a/src/mangosd/mangosd.conf.dist.in b/src/mangosd/mangosd.conf.dist.in
index 17bac66..83439a1 100644
--- a/src/mangosd/mangosd.conf.dist.in
+++ b/src/mangosd/mangosd.conf.dist.in
@@ -1372,6 +1372,11 @@ Death.Ghost.RunSpeed.Battleground = 1.0
 #        Default: 0 (disable)
 #                 1 (enable)
 #
+#    Battleground.StoreStatistics.Enable
+#        Store Battleground scores in the database.
+#        Default: 0 - (Disabled)
+#                 1 - (Enabled)
+#
 #    Battleground.InvitationType
 #        Set Battleground invitation type
 #        Default: 0 (normal - invite as much players to bg as possible, don't bother with ballance)
@@ -1392,6 +1397,7 @@ Death.Ghost.RunSpeed.Battleground = 1.0
 Battleground.CastDeserter = 1
 Battleground.QueueAnnouncer.Join = 0
 Battleground.QueueAnnouncer.Start = 0
+Battleground.StoreStatistics.Enable = 0
 Battleground.InvitationType = 0
 BattleGround.PrematureFinishTimer = 300000
 BattleGround.PremadeGroupWaitForMatch = 0
--
1.9.1

